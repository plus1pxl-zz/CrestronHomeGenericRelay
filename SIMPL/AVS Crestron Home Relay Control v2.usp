                                                                                                                 /*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "AVS Crestron Home Relay Control v2"
#CATEGORY "36" // Crestron Home
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
  If the device state does not change reflecting the sent command within timeout, an ERROR response will be sent.
#HELP_END
*/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT
_SKIP_,
Relay_Fb,
Relay_Online_Fb;

//ANALOG_INPUT

STRING_INPUT
_SKIP_,
_SKIP_,
Device_Rx$[16];

DIGITAL_OUTPUT
_SKIP_,
Relay_On_Set,
Relay_Off_Set;

//ANALOG_OUTPUT

STRING_OUTPUT
_SKIP_,
Device_Tx$; 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER Timeout;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES Timeout
	propValidUnits   = unitTime;
	propDefaultUnit  = unitTime;
	propDefaultValue = 5s;
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER giOnline;
// LONG_INTEGER
STRING gsCommand[16];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
FUNCTION SendResponse(string response$)
{
	Device_Tx$ = response$ + "\r";
}


FUNCTION ProcessCommand()
{
	string response$[16];

	if(giOnline = 0)
	{
		response$ = "ERROR";
		SendResponse(response$);
	}

	else
	{
		if(gsCommand = "ON\r")
		{
			Relay_On_Set = 1;
			Relay_On_Set = 0;

			WAIT (Timeout, TurningOn)
			{
				string response$[16];
				response$ = "ERROR";
				SendResponse(response$);
			}
		}
		else if(gsCommand = "OFF\r")
		{
			Relay_OFF_Set = 1;
			Relay_OFF_Set = 0;

			WAIT (Timeout, TurningOff)
			{
				string response$[16];
				response$ = "ERROR";
				SendResponse(response$);
			}
		}
		else if(gsCommand = "STATUS\r")
		{
			if(Relay_Fb = 1)
			{
				response$ = "IS ON";
			}
			else if(Relay_Fb = 0)
			{
				response$ = "IS OFF";
			}

			SendResponse(response$);
		}
	}

}

FUNCTION ProcessFeedback(integer feedback)
{
	string response$[16];
                        
	if(gsCommand != "STATUS\r" && giOnline = 1)
	{
		if(gsCommand = "ON\r" && feedback = 1)
		{
			CANCELWAIT(TurningOn);
			response$ = "SUCCESS IS ON";
		}
		else if(gsCommand = "OFF\r" && feedback = 0)
		{
			CANCELWAIT(TurningOff);
			response$ = "SUCCESS IS OFF";
		}
		else
		{
			response$ = "ERROR";
		}
	}	
	if(giOnline = 0)
	{
		response$ = "ERROR";
	}

	SendResponse(response$);
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

/*******************************************************************************************
  Actions
*******************************************************************************************/
THREADSAFE CHANGE Device_Rx$
{
 	gsCommand = Device_Rx$;
	ProcessCommand();
}

/*******************************************************************************************
  UPDATE Feedbacks
*******************************************************************************************/

CHANGE Relay_Fb
{
	integer feedback;
	feedback = Relay_Fb;
	ProcessFeedback(feedback);	
}

CHANGE Relay_Online_Fb {
	giOnline = Relay_Online_Fb;
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	giOnline = 0;
	gsCommand = "";	
}


